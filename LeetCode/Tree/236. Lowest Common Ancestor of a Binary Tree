//Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
//According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two 
//nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution 
{
    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) 
    {
         if(root == null || root == p || root == q)
            return root;

        var left = LowestCommonAncestor(root.left, p, q);
        var right = LowestCommonAncestor(root.right, p, q);

        return (left != null && right != null) ? root : left ?? right;       
    }

    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q)
    {
        if (root == null)
            return null;
        if (root == p || root == q)
            return root;

        TreeNode left = LowestCommonAncestor(root.left, p, q);
        TreeNode right = LowestCommonAncestor(root.right, p, q);

        if (left != null && right != null)
            return root;
        if (left != null)
            return left;
        if (right != null)
            return right;
        return null;
    }
}


public class Solution 
{
    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q)
    {
        if (root == null)
            return null;
        Dictionary<TreeNode, TreeNode> parentDict = new Dictionary<TreeNode, TreeNode>();
        DFSTraverse(root, null, parentDict);
        List<TreeNode> pList = new List<TreeNode>();
        List<TreeNode> qList = new List<TreeNode>();
        while (p != null)
        {
            pList.Add(p);
            p = parentDict[p];
        }
        while (q != null)
        {
            qList.Add(q);
            q = parentDict[q];
        }
        foreach(var el in qList) 
        {
            if(pList.Contains(el))
                return el;
        }
        return null;
    }

    private void DFSTraverse(TreeNode root, TreeNode parent, Dictionary<TreeNode, TreeNode> parentDict)
    {
        if (root == null)
            return;
        if (!parentDict.ContainsKey(root))
            parentDict.Add(root, parent);
        DFSTraverse(root.left, root, parentDict);
        DFSTraverse(root.right, root, parentDict);
        return;
    }
}
