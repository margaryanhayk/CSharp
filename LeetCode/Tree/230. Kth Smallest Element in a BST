//Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution 
{
    public int KthSmallest(TreeNode root, int k)
    {
        List<int> arr = new List<int>();
        BFSWitchHeap(arr, root, k);
        return arr.ElementAt(k-1);
    }
    private void BFSWitchHeap(List<int> arr, TreeNode root, int k)
    {
        if (root == null || arr.Count == k)
            return;
        BFSWitchHeap(arr, root.left, k);
        arr.Add(root.val);
        BFSWitchHeap(arr, root.right, k);
    }
}
