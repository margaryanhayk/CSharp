//Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored 
//in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.
//Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization
//algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.
//Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this 
//format, so please be creative and come up with different approaches yourself.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Codec 
{
    public string serialize(TreeNode root)
    {
        List<int?> levelOrder = LevelOrder(root);
        return ConcatInPreTraversals(levelOrder);
    }
    public List<int?> LevelOrder(TreeNode root)
    {
        List<int?> result = new List<int?>();
        Queue<TreeNode> queue = new Queue<TreeNode>();
        queue.Enqueue(root);
        while (queue.Count != 0)
        {
            int size = queue.Count;
            for (int ix = 0; ix < size; ++ix)
            {
                TreeNode current = queue.Dequeue();
                if (current == null)
                    result.Add((int?)null);
                else
                {
                    result.Add(current.val);
                    queue.Enqueue(current.left);
                    queue.Enqueue(current.right);
                }
            }
        }
        return result;
    }
    private string ConcatInPreTraversals(List<int?> levelOrder)
    {
        StringBuilder str = new StringBuilder();
        foreach (var el in levelOrder)
        {
            if(el == null)
                str.Append("null");
            else
                str.Append(el.ToString());
            str.Append(',');
        }

        return str.ToString();
    }
    public TreeNode deserialize(string data)
    {
        List<TreeNode> levelOrder = data.TrimEnd(',').Split(',').Select(x => x == "null" ? null : new TreeNode(int.Parse(x))).ToList();

        if (levelOrder.Count == 0 || levelOrder.First() == null)
            return null;

        int j = 1;
        for (int ix = 0; ix < levelOrder.Count; ++ix)
        {
            if (levelOrder[ix] == null)
                continue;
            levelOrder[ix].left =(j < levelOrder.Count) ? levelOrder[j++] : null;
            levelOrder[ix].right = (j < levelOrder.Count) ? levelOrder[j++] : null;
        }
        return levelOrder.First();
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
