Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of 
the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.
A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution 
{
    public IList<IList<int>> PathSum(TreeNode root, int targetSum) 
    {
        List<IList<int>> result = new List<IList<int>>();
        if (root == null)
            return result;
        Stack<(List<int>, TreeNode, int)> stack = new Stack<(List<int>, TreeNode, int)>();
        stack.Push((new List<int>() {root.val }, root, root.val));
        while(stack.Any())
        {
            var (currentPath, currentNode, currentSum) = stack.Pop();
            if (currentNode.left == null && currentNode.right == null && currentSum == targetSum)
                result.Add(currentPath);
            if (currentNode.right != null)
                stack.Push((new List<int>(currentPath) { currentNode.right.val }, currentNode.right, currentSum + currentNode.right.val));
            if (currentNode.left != null)
                stack.Push((new List<int>(currentPath) { currentNode.left.val }, currentNode.left, currentSum + currentNode.left.val));
        }
        return result;        
    }
}
