//Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, 
//return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.
//Two nodes of a binary tree are cousins if they have the same depth with different parents.
//Note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution 
{
    public bool IsCousins(TreeNode root, int x, int y)
    {
        if (root == null)
            return false;
        Queue<TreeNode> queue = new Queue<TreeNode>();
        queue.Enqueue(root);
        while (queue.Count > 0)
        {
            int count = queue.Count;
            int existCount = 0;
            for (int ix = 0; ix < count; ++ix)
            {
                int addedCount = 0;
                var tmp = queue.Dequeue();
                if(tmp.val == x || tmp.val == y)
                    ++existCount;
                if (tmp.left != null)
                {
                    if (tmp.left.val == x || tmp.left.val == y)
                        ++addedCount;
                    queue.Enqueue(tmp.left);
                }
                if (tmp.right != null)
                {
                    if (tmp.right.val == x || tmp.right.val == y)
                        ++addedCount;
                    queue.Enqueue(tmp.right);
                }
                if (addedCount == 2)
                    return false;
            }
            if (existCount == 2)
                return true;
        }
        return false;
    }
}
