//A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an
//edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.
//The path sum of a path is the sum of the node's values in the path.

//Given the root of a binary tree, return the maximum path sum of any non-empty path.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution
{
    public int max = int.MinValue;
    public int MaxPathSum(TreeNode root)
    {
        MaxPathSumRec(root);
        return max;
    }
    public int MaxPathSumRec(TreeNode root)
    {
        if (root == null)
            return 0;

        int maxLeftPositive = Math.Max(0, MaxPathSumRec(root.left));
        int maxRightPositive = Math.Max(0, MaxPathSumRec(root.right));

        int currentMax = root.val + maxLeftPositive + maxRightPositive;
        max = Math.Max(currentMax, max);

        return root.val + Math.Max(maxLeftPositive, maxRightPositive);  
    }
}

**********************another day, another way...*****************************
public class Solution 
{
    public int MaxPathSum(TreeNode root)
    {
        if(root == null)
            return 0;
        int maxSum = int.MinValue;
        MaxPathSumRex(root, ref maxSum);
        return maxSum;
    }
    private int MaxPathSumRex(TreeNode root, ref int maxSum)
    {
        if (root == null)
            return 0;
        int left = MaxPathSumRex(root.left, ref maxSum);
        int right = MaxPathSumRex(root.right, ref maxSum);
        var rootVal = root.val;
        root.val = Math.Max(Math.Max(left + root.val, right + root.val), root.val);
        maxSum = Math.Max(maxSum, Math.Max(root.val, left + right + rootVal));
        return root.val;
    }
}
