//Given two integer arrays preorder and inorder where preorder is the preorder traversal 
//of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution 
{
    public TreeNode BuildTree(int[] preorder, int[] inorder)
    {
        if (!inorder.Any())
            return null;

        return BuildTree(preorder.ToList(), inorder.ToList());
    }

    public TreeNode BuildTree(List<int> preorder, List<int> inorder)
    {
        TreeNode root = new TreeNode(preorder[0]);

        var rootIndexInInorder = inorder.IndexOf(root.val);
        if (rootIndexInInorder == -1)
            return null;

        List<int> leftInorder = new List<int>();
        List<int> rightInorder = new List<int>();

        for (int ix = 0; ix < rootIndexInInorder; ++ix)
            leftInorder.Add(inorder[ix]);
        for (int ix = rootIndexInInorder + 1; ix < inorder.Count(); ++ix)
            rightInorder.Add(inorder[ix]);

        preorder.RemoveAt(0);
        if (leftInorder.Any())
            root.left = BuildTree(preorder, leftInorder);
        else
            root.left = null;

        if (rightInorder.Any())
            root.right = BuildTree(preorder, rightInorder);
        else
            root.right = null;

        return root;
    }
}
