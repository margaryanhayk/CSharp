//Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution
{
    public IList<IList<int>> LevelOrder(TreeNode root) 
    {
        IList<IList<int>> result = new List<IList<int>>();
        Queue<TreeNode> queue = new Queue<TreeNode>();
        if(root == null)
            return result;
        queue.Enqueue(root);
        while(queue.Count != 0)
        {
            List<int> level = new List<int>();
            int size = queue.Count;
            for (int ix = 0; ix < size; ++ix)
            {
                TreeNode current = queue.Dequeue();
                level.Add(current.val);
                if(current.left != null)
                    queue.Enqueue(current.left);
                if(current.right != null)
                    queue.Enqueue(current.right);
            } 
            result.Add(level);         
        }
        return result;    
    }
}
