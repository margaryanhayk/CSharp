//Given a reference of a node in a connected undirected graph.
//Return a deep copy (clone) of the graph.
//Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.

/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> neighbors;

    public Node() {
        val = 0;
        neighbors = new List<Node>();
    }

    public Node(int _val) {
        val = _val;
        neighbors = new List<Node>();
    }

    public Node(int _val, List<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

public class Solution 
{
    public Node CloneGraph(Node node)
    {
        if (node == null)
            return null;
        HashSet<Node> hash = new HashSet<Node>();
        Node newNode = Clone(node, hash);
        return newNode;
    }

    private Node Clone(Node original, HashSet<Node> hash)
    {
        if (hash.Any(x => x.val == original.val))
            return hash.First(x => x.val == original.val);
        
        Node newNode = new Node(original.val);
        hash.Add(newNode);

        foreach(var neighbour in original.neighbors)
            newNode.neighbors.Add(Clone(neighbour, hash));
        return newNode;
    }
}
