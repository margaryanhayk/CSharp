//You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
//Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
//You may assume that you have an infinite number of each kind of coin.

public class Solution 
{
    public int CoinChange(int[] coins, int amount)
    {
        int[] dp = new int[amount + 1];

        for (int i = 0; i < dp.Length; i++)
            dp[i] = amount + 1;
        
        dp[0] = 0;

        foreach (int coin in coins)
        {
            for (int i = coin; i <= amount; i++)
                dp[i] = Math.Min(dp[i], dp[i - coin] + 1);
        }
        return dp[amount] <= amount ? dp[amount] : -1;
    }
}
