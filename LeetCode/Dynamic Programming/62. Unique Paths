//There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]).
//The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
//Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
//The test cases are generated so that the answer will be less than or equal to 2 * 109.

public class Solution 
{
    public int UniquePaths(int m, int n)
    {
        if (m == 1 || n == 1)
            return 1;

        int[,] arr = new int[m, n];
        for (int ix = 0; ix < m; ix++)
            arr[ix, 0] = 1;
        for (int iy = 0; iy < n; iy++)
            arr[0, iy] = 1;
        for (int ix = 1; ix < m; ix++)
        {
            for (int iy = 1; iy < n; iy++)
            {
                arr[ix, iy] = arr[ix - 1, iy] + arr[ix, iy - 1];
            }
        }
        return arr[m-1, n - 1];
    }
}
