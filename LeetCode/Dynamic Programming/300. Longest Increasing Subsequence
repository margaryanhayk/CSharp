//Given an integer array nums, return the length of the longest strictly increasing 

// *** O(nLogN) *** //
public class Solution 
{
    public int LengthOfLIS(int[] nums)
    {
        List<int> tails = new List<int>();
        foreach(var num in nums)
        {
            int left = 0;
            int right = tails.Count;
            while (left < right)
            {
                int mid = (left + right) / 2;
                if (tails[mid] >= num)
                    right = mid;
                else
                    left = mid + 1;
            }
            if(left == tails.Count)
                tails.Add(num);
            else
                tails[left] = num;
        }
        return tails.Count();
    }
}

// *** Dynamic Programming O(n2) *** //
public class Solution 
{
    public int LengthOfLIS(int[] nums)
    {
        int[] dp = Enumerable.Repeat(1, nums.Length).ToArray();
        for (int ix = 1; ix < nums.Length; ++ix)
            for (int iy = ix - 1; iy > -1; --iy)
                if (nums[ix] > nums[iy])
                    dp[ix] = Math.Max(dp[ix], dp[iy] + 1);
        return dp.Max();     
    }
}
