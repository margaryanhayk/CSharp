//Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.
//A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

public class Solution 
{
    public int LongestCommonSubsequence(string text1, string text2) 
    {
        int m = text1.Length;
        int n = text2.Length;
        int[,] dp = new int[m + 1, n + 1];
        for(int ix = 0; ix < m + 1; ++ix)
            dp[ix, 0] = 0;                    
        for(int ix = 0; ix < n + 1; ++ix)
            dp[0, ix] = 0;
        for(int ix = 1; ix < m + 1; ++ix)
        {
            for(int jix = 1; jix < n + 1; ++jix)
            {
                if(text1[ix - 1] == text2[jix - 1])
                    dp[ix, jix] = dp[ix  - 1, jix - 1] + 1;
                else
                   dp[ix, jix] = Math.Max(dp[ix - 1, jix], dp[ix, jix - 1]);                         
            }
        }
        return dp[m,n];
    }
}
