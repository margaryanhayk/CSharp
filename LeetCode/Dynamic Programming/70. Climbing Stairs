//You are climbing a staircase. It takes n steps to reach the top.
//Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

public class Solution 
{
    public int ClimbStairs(int n)
    {
        if (n == 1 || n == 2)
            return n;
        int[] apps = new int[n];
        apps[0] = 1;
        apps[1] = 2;
        for (int ix = 2; ix < n; ++ix)
            apps[ix] = apps[ix -1] + apps[ix - 2];
        return apps[n - 1];
    }
}

public class Solution {
    public int ClimbStairs(int n) 
    {
        if (n == 1 || n == 2)
            return n;   
        int first  = 1;
        int sec = 2;
        int current = 0;
        for(int ix = 2; ix < n; ++ix)
        {
            current = first + sec;
            first = sec;
            sec = current;
        }
        return current;    
    }
}


////RECURSIVE SOLUTION////
public int ClimbStairs(int n)
{
    if(n == 1 || n == 2)
        return n;
    return (ClimbStairs(n - 1) + ClimbStairs(n - 2));
}


