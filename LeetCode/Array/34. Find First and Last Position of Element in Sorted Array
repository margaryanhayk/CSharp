//Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
//If target is not found in the array, return [-1, -1].
//You must write an algorithm with O(log n) runtime complexity.

public class Solution 
{
    public int[] SearchRange(int[] nums, int target)
    {
        int[] result = new int[] { -1, -1 };
        result[0] = GetBound(nums, target, true);
        if (result[0] >= 0)
            result[1] = GetBound(nums, target, false);
        return result;
    }

    private int GetBound(int[] nums, int target, bool isFirst)
    {
        int left = 0;
        int right = nums.Length - 1;
        int bound = -1;
        while (left <= right)
        {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target)
            {
                bound = mid;
                if (isFirst)
                    right = mid - 1;
                else
                    left = mid + 1;
            }
            else if (nums[mid] < target)
                left = mid + 1;
            else
                right = mid - 1;
        }
        return bound;
    }
}
