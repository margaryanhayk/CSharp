//Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).
//The distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)2 + (y1 - y2)2).
//You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

public class Solution 
{
    public int[][] KClosest(int[][] points, int k)
    {
        PriorityQueue<int[], int> maxHeap = new PriorityQueue<int[], int>();
        foreach (var point in points)
        {
            var dist = GetDistanceSquare(point);
            maxHeap.Enqueue(point, -dist);
            if (maxHeap.Count > k)
                maxHeap.Dequeue();
        }
        int[][] result = new int[maxHeap.Count][];
        for (int ix = 0; ix < result.Length; ++ix)
            result[ix] = maxHeap.Dequeue();
        return result;
    }

    private int GetDistanceSquare(int[] point)
    {
        return point[0] * point[0] + point[1] * point[1];
    }
}
