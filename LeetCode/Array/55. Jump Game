//You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.
//Return true if you can reach the last index, or false otherwise.

//////////Greedy Algorithm ///////////////////

    public bool CanJump(int[] nums) 
    {
        int farthestIndex = 0;
        for(int ix = 0; ix < nums.Length; ++ix)
        {
            if (ix > farthestIndex)
                return false;

            farthestIndex = Math.Max(nums[ix] + ix, farthestIndex);
            if (farthestIndex >= nums.Length)
                return true;
        }
        return true;
    }
//////////////////////////////////////////////////

//////////First Solution - NICE ///////////////////
public class Solution
{
    public bool CanJump(int[] nums)
    {
        int maxJump = 1;
        for (int ix = 0; ix < nums.Length; ++ix)
        {
            --maxJump;
            maxJump = Math.Max(maxJump, nums[ix]);
            if (maxJump == 0 && ix != nums.Length - 1)
                return false;
        }
        return true;
    }
}
//////////////////////////////////////////////////


//////////    Third Solution   ///////////////////

    public bool CanJump(int[] nums) 
    {
        if (nums[0] == 0 && nums.Length > 1)
            return false;
        for (int ix = nums.Length - 2; ix > 0; --ix)
        {
            if (nums[ix] != 0)
                continue;
            for(int iy = ix -1; iy > -1; --iy )
            {
                if (iy + nums[iy] > ix)
                {
                    ix = iy;
                    break;
                }
                else if (iy == 0)
                    return false;
            }
        }
        return true;       
    }
//////////////////////////////////////////////////

//////////    Second Solution   ///////////////////
public class Solution
{
    public bool CanJump(int[] nums)
    {
        if (nums.Length == 0)
            return false;
        int lastIndex = nums.Length - 1;
        bool[] bools = new bool[lastIndex + 1];
        bools[lastIndex] = true;
        for (int ix = lastIndex - 1; ix >=0; --ix)
        {
            for(int iy = 1; iy <= nums[ix] && iy <= lastIndex; ++iy) 
            {
                if (bools[ix + iy])
                {
                    bools[ix] = true;
                    break;
                }
            }
        }
        return bools[0];
    }
}
//////////////////////////////////////////////////
