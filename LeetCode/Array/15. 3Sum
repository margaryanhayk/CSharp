//Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
//Notice that the solution set must not contain duplicate triplets.

public class Solution 
{
    public IList<IList<int>> ThreeSum(int[] nums)
    {
        List<IList<int>> result = new List<IList<int>>();
        Array.Sort(nums);
        for(int ix = 0; ix < nums.Length - 1; ++ix)
        {
            if (ix > 0 && nums[ix] == nums[ix - 1])
                continue;
            if (nums[ix] > 0)
                break;
            int left = ix + 1;
            int right = nums.Length - 1;
            while(right > left)
            {
                if (-nums[ix] < nums[left] + nums[right])
                    --right;
                else if (-nums[ix] > nums[left] + nums[right])
                    ++left;
                else
                {
                    result.Add(new List<int>() { nums[ix], nums[left], nums[right] });
                    while (left < right && nums[left] == nums[left + 1]) ++left;
                    while (left < right && nums[right] == nums[right - 1]) --right;
                    ++left;
                    --right;
                }
            }
        }
        
        return result;
    }
}
