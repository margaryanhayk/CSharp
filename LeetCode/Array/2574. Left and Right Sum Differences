Given a 0-indexed integer array nums, find a 0-indexed integer array answer where:
answer.length == nums.length.
answer[i] = |leftSum[i] - rightSum[i]|.
Where:
leftSum[i] is the sum of elements to the left of the index i in the array nums. If there is no such element, leftSum[i] = 0.
rightSum[i] is the sum of elements to the right of the index i in the array nums. If there is no such element, rightSum[i] = 0.

public class Solution {
    public int[] LeftRightDifference(int[] nums) 
    {
        int leftSum = 0;
        int rightSum = 0;
        int[] result = new int[nums.Length];
        for(int ix = 1; ix < nums.Length; ++ix)
            rightSum += nums[ix];
        
        result[0] = Math.Abs(leftSum - rightSum);

        for(int ix = 1; ix < nums.Length; ++ix)
        {
            leftSum += nums[ix - 1];
            rightSum -= nums[ix];
            result[ix] =  Math.Abs(leftSum - rightSum);
        }
        return result;
    }
}
