//Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, 
//and return an array of the non-overlapping intervals that cover all the intervals in the input.

public class Solution 
{
    public int[][] Merge(int[][] intervals)
    {
        if (intervals.Length == 0)
            return new int[0][];

        Array.Sort(intervals, (a, b) => a[0].CompareTo(b[0]));
        List<int[]> result = new List<int[]>();

        int[] currentInterval = intervals[0];

        foreach(var el in intervals)
        {
            if (currentInterval[1] >= el[0])
                currentInterval[1] = Math.Max(currentInterval[1], el[1]);
            else
            {
                result.Add(currentInterval);
                currentInterval = el;
            }
        }
        result.Add(currentInterval);
        return result.ToArray();
    }
}
