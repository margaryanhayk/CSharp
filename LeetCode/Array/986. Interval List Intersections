//You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.
//Return the intersection of these two interval lists.
//A closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.
//The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].

public class Solution 
{
    public int[][] IntervalIntersection(int[][] firstList, int[][] secondList)
    {
        List<int[]> resultList = new List<int[]>();
        int firstPtr = 0;
        int secPtr = 0;
        while(firstPtr < firstList.Length && secPtr < secondList.Length)
        {
            var curr = MergeIntersect(firstList[firstPtr], secondList[secPtr]);
            if(curr.Item1 != null)
                resultList.Add(curr.Item1);
            if (curr.Item2 == 3)
            {
                ++firstPtr;
                ++secPtr;
            }
            else if (curr.Item2 == 2)
                ++secPtr;
            else
                ++firstPtr;
        }
        return resultList.ToArray();
    }

    private static (int[], int) MergeIntersect(int[] first, int[] second) // 1 -> firstPtr++, 2 -> secPtr++, 3 -> ++twice
    {
        bool isSwitched = false;
        int[]tmp = new int[2];
        if (second[0] < first[0])
        {
            tmp = second;
            second = first;
            first = tmp;
            isSwitched = true;
        }
        if (first[1] >= second[1])
        {
            var res = new int[] { second[0], second[1] };
            int k = isSwitched ? 1 : 2;
            if (first[1] == second[1])
                k = 3;
            return (res, k);
        }
        if (first[1] < second[0])
        {
            int k = isSwitched ? 2 : 1;
            return (null, k);
        }
        if (first[1] == second[0])
        {
            int k = isSwitched ? 2 : 1;
            return (new int[2] { first[1], first[1] }, k);
        }
        else
        {
            int k = isSwitched ? 2 : 1;
            return (new int[2] { second[0], first[1] }, k);
        }
    }
}
