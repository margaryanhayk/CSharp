//You are given a 0-indexed array nums of length n.
//The distinct difference array of nums is an array diff of length n such that diff[i] is equal to the number of distinct elements in the suffix nums[i + 1, ..., n - 1] subtracted from the number of distinct elements in the prefix nums[0, ..., i].
//Return the distinct difference array of nums.
//Note that nums[i, ..., j] denotes the subarray of nums starting at index i and ending at index j inclusive. Particularly, if i > j then nums[i, ..., j] denotes an empty subarray.


public class Solution {
    public int[] DistinctDifferenceArray(int[] nums)
    {
        if (nums.Length == 0)
            return null;
        var left = new Dictionary<int, int>();
        var right = new Dictionary<int, int>();
        var result = new int[nums.Length];
        left.Add(nums[0], 1);
        int x = 1;
        int y = 0;
        for (int ix = 1; ix < nums.Length; ++ix)
        {
            if (right.ContainsKey(nums[ix]))
                ++right[nums[ix]];
            else
            {
                right.Add(nums[ix], 1);
                ++y;
            }
        }
        result[0] = x - y;
        for (int ix = 1; ix < nums.Length; ++ix)
        {
            if (left.ContainsKey(nums[ix]))
                ++left[nums[ix]];
            else
            {
                left.Add(nums[ix], 1);
                ++x;
            }
            --right[nums[ix]];
            if (right[nums[ix]] == 0)
                --y;

            result[ix] = x - y;
        }
        return result;
    }
}
