//Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.
//The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the 
//frequency of at least one of the chosen numbers is different.
//The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

public class Solution 
{
    public IList<IList<int>> CombinationSum(int[] candidates, int target)
    {
        List<IList<int>> result = new List<IList<int>>();
        Array.Sort(candidates);
        BackTrack(candidates, 0, target, result, new List<int>());
        return result;
    }

    private void BackTrack(int[] candidates, int index, int target, List<IList<int>> result, List<int> current) 
    {
        if(target == 0)
        {
            result.Add(new List<int>(current));
            return;
        }
        for(int ix = index; ix < candidates.Length; ++ix)
        {
            if (candidates[ix] > target)
                break;
            current.Add(candidates[ix]);
            BackTrack(candidates, ix, target - candidates[ix], result, current);
            current.RemoveAt(current.Count - 1);
        }
    }
}
